## Day 3 â€“ Arrays Practice & Complexity Concepts
Learning Track: Love Babbar DSA Playlist
ðŸ”— Love Babbar â€“ Arrays & Time-Space Complexity (YouTube)

 ##Topics Covered Today:
From todayâ€™s video, I focused on understanding Time and Space Complexity. Key takeaways:
Time Complexity: Measures how the runtime of an algorithm grows with input size. Notations include:
O(1) â€“ Constant
O(n) â€“ Linear
O(log n) â€“ Logarithmic
O(nÂ²), O(nÂ³) â€“ Polynomial growth

Space Complexity: Measures how much extra memory (besides input) the algorithm uses.
Recursive functions often increase space complexity due to call stack usage.
In-place operations help reduce space usage to O(1).
Learned how to identify the best, average, and worst-case complexities for a given problem.
Understood how nested loops multiply time complexity.
Tomorrow, Iâ€™ll continue with the Arrays playlist and tackle more LeetCode problems to strengthen my understanding.

## LeetCode Practice
1. Remove Duplicates from Sorted Array
  ðŸ”— Problem Link - https://leetcode.com/problems/remove-duplicates-from-sorted-array/
Approach: Used a two-pointer technique where one pointer iterated through the array and the other kept track of unique values. 
The challenge was handling the last unique element, which didnâ€™t have a next element for comparison. Solved this by explicitly checking when at the last index.
Time Complexity: O(n)
Space Complexity: O(1) (in-place)
Difficulty: Easy

Reflection:
Initially missed including the last number.
Understood the importance of handling edge conditions.
The two-pointer method is efficient and intuitive for such array modification problems.

2. Two Sum
ðŸ”— Problem Link - https://leetcode.com/problems/two-sum/description/
Approach: Used a brute-force method with nested loops to check all possible pairs. Implemented dynamic memory allocation (malloc) to return the result indices.
Time Complexity: O(nÂ²)
Space Complexity: O(1) (excluding return array)
Difficulty: Easy
Reflection:Faced difficulty understanding dynamic memory allocation and how to return arrays from functions.
Learned how malloc and pointers work in C for returning multiple values.
Plan to try a hash mapâ€“based optimized approach next time for better efficiency.

##Tomorrow's plan
  Tomorrow, Iâ€™ll begin learning about STL in C++, especially focusing on vectors, so I can switch to coding in C++ for future LeetCode problems.
  This will help me write cleaner and more efficient code with built-in support for dynamic data structures.
